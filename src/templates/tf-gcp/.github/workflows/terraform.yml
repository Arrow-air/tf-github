## DO NOT EDIT!
## This file was provisioned by Terraform
## File origin: https://github.com/Arrow-air/tf-github/tree/main/src/templates/tf-gcp/.github/workflows/terraform.yml
#
name: "Run terraform for workspaces"

on:
  push:
    branches:
      - main
  pull_request:

env:
  TERM: xterm

jobs:
  setup:
    name: "Setup matrix variables"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: get_workspaces
        run: echo "workspaces=$(cat .terraform_workspaces.json)" >> "$GITHUB_OUTPUT"
    outputs:
      workspaces: ${{ steps.get_workspaces.outputs.workspaces }}

  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      issues: write
      pull-requests: write
      contents: read
      id-token: write
    strategy:
      matrix:
        workspace: ${{fromJSON(needs.setup.outputs.workspaces)}}
    concurrency:
      group: terraform-${{ github.head_ref || 'main' }}
    environment: ${{ matrix.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: gcp-auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/automation/providers/github-tf-gcp-organization'
          service_account: 'github-actions@arw-${{ matrix.workspace }}-org.iam.gserviceaccount.com'

      - name: Write vars file
        run: echo "${{ secrets.AUTO_TF_VARS_BASE64 }}" | base64 -d >> src/local.auto.tfvars

      - name: Terraform Check Format
        id: fmt
        run: make tf-fmt

      - name: Terraform Init
        id: init
        run: make tf-init-${{ matrix.workspace }}

      - name: Terraform Validate
        id: validate
        env:
          TF_FLAGS: "-no-color"
          TF_STDOUT: "validate.out"
        run: |
          make tf-validate-${{ matrix.workspace }}
          echo "stdout<<EOF" >> $GITHUB_OUTPUT
          cat $TF_STDOUT >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        env:
          TF_FLAGS: "-no-color -lock=false -input=false"
        run: |
          make tf-plan-${{ matrix.workspace }}
        continue-on-error: true

      - name: Terraform Plan Export
        id: planshow
        if: github.event_name == 'pull_request'
        env:
          TF_FLAGS: "-no-color"
          TF_STDOUT: "plan.out"
        run: |
          make tf-show-${{ matrix.workspace }}
          echo "stdout<<EOF" >> $GITHUB_OUTPUT
          cat $TF_STDOUT >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Add PR comment with plan output
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.planshow.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure' && !contains(github.event.head_commit.message, 'provisioned by terraform')
        run: exit 1

      - name: Terraform Plan & Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && !contains(github.event.head_commit.message, 'provisioned by terraform')
        env:
          TF_FLAGS: "-no-color -input=false"
        run: |
          make tf-plan-${{ matrix.workspace }}
          make tf-apply-${{ matrix.workspace }}
