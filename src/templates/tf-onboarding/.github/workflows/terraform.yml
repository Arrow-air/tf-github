## DO NOT EDIT!
### This file was provisioned by Terraform
### File origin: https://github.com/Arrow-air/tf-github/tree/main/src/templates/tf-onboarding/.github/workflows/terraform.yml

name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

env:
  GITHUB_APP_PEM_FILE: ${{ secrets.TF_GITHUB_APP_PEM_FILE }}
  TF_VERSION: 1.3.7

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
      id-token: write

    defaults:
      run:
        working-directory: src
    concurrency:
      group: terraform-${{ github.head_ref || 'main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_POOL }}
          service_account: ${{ secrets.GOOGLE_TERRAFORM_SA }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "arn:aws:iam::${{ secrets.AWS_IAM_ACCOUNT_ID }}:role/all-GitHubActionsOnboarding"
          role-session-name: arrow-onboarding-terraform
          aws-region: "us-east-1"

      - name: JSON Syntax check
        uses: limitusus/json-syntax-check@v1
        with:
          pattern: "\\.json$"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_TOKEN }}
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -no-color -lock=false -input=false -out tf.plan
        continue-on-error: true

      - name: Terraform Plan Show
        id: planshow
        if: github.event_name == 'pull_request'
        run: |
          terraform show -no-color tf.plan

      - name: Add PR comment with plan output
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.planshow.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style ðŸ–Œ \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization âš™\`${{ steps.init.outcome }}\`
            #### Terraform Validation ðŸ¤–\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure' && !contains(github.event.head_commit.message, 'provisioned by terraform')
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && !contains(github.event.head_commit.message, 'provisioned by terraform')
        run: terraform apply -auto-approve -input=false
